name: Cesium for Unity
on: [push]
jobs:
  QuickChecks:
    name: "Quick Checks"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install clang-format
        run: pip install clang-format
      - name: Check source formatting
        run: |
          find native~/Runtime native~/Editor native~/Shared \( -iname '*.cpp' -o -iname '*.h' \) -print0 | xargs -0 clang-format --dry-run -Werror
  Windows:
    needs: [QuickChecks]
    runs-on: windows-latest
    # Only allow a single Windows build at a time, for Unity licensing reasons
    concurrency: windows
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install wget
        run: choco install wget --no-progress
      - name: Install Unity Hub
        run: |
          wget --quiet https://public-cdn.cloud.unity3d.com/hub/prod/UnityHubSetup.exe
          start -FilePath ./UnityHubSetup.exe -ArgumentList "/S" -Wait
          rm ./UnityHubSetup.exe
      - name: Install Unity 2021.3.13f1
        run: start -FilePath "C:\Program Files\Unity Hub\Unity Hub.exe" -ArgumentList "-- --headless install --version 2021.3.13f1 --changeset 9e7d58001ecf" -Wait
      - name: Install Unity Android Support
        run: start -FilePath "C:\Program Files\Unity Hub\Unity Hub.exe" -ArgumentList "-- --headless install-modules --version 2021.3.13f1 --changeset 9e7d58001ecf --module android android-sdk-ndk-tools" -Wait
      - name: Create SSH tunnel to Unity License Server
        env:
          UNITY_LICENSE_SERVER_SSH_KEY: ${{ secrets.UNITY_LICENSE_SERVER_SSH_KEY }}
        run: |
          $ENV:UNITY_LICENSE_SERVER_SSH_KEY | Set-Content ~/unity-client-ssh-key
          # Without StrictHostKeyChecking, OpenSSH will sit forever waiting for local input to confirm the server key is ok.
          # We don't really care if the server is authentic, because we're not sending anything sensitive to it.
          # The license server VM's sshd_config also needed to be modified with the following options, in order to prevent
          # the tunnel from being closed between here and when we're ready to use it.
          #   TCPKeepAlive yes
          #   ClientAliveInterval 30
          #   ClientAliveCountMax 9999
          start -FilePath ssh -ArgumentList "-o StrictHostKeyChecking=no -i ~/unity-client-ssh-key -L 127.0.0.1:12331:127.0.0.1:8080 unity-client@ec2-44-204-244-196.compute-1.amazonaws.com"
          sleep 5
      - name: Test Connection to Unity License Server
        run: |
          wget http://127.0.0.1:12331/v1/admin/status
          cat status
          rm status
      - name: Configure Unity to Use the License Server
        run: |
          mkdir -p $ENV:PROGRAMDATA/Unity/config
          '{"licensingServiceBaseUrl": "http://localhost:12331","enableEntitlementLicensing": true,"clientConnectTimeoutSec": 60,"clientHandshakeTimeoutSec": 120}' > $ENV:PROGRAMDATA/Unity/config/services-config.json
      - name: Move cesium-unity Repo Under Empty Project
        run: |
          mkdir -p \cesium\CesiumForUnityBuildProject\Packages\com.cesium.unity
          mv $ENV:GITHUB_WORKSPACE/* \cesium\CesiumForUnityBuildProject\Packages\com.cesium.unity
      - name: Build Reinterop
        run: |
          cd \cesium\CesiumForUnityBuildProject\Packages\com.cesium.unity
          dotnet publish Reinterop~ -o .
      - name: Build Package
        run: |
          cd \cesium\CesiumForUnityBuildProject\Packages\com.cesium.unity
          dotnet run --project Build~
          dir D:\cesium\CesiumForUnityBuildProject
      - name: Publish package artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: Windows Package
          path: D:\cesium\CesiumForUnityBuildProject\*.tgz
  MacOS:
    needs: [QuickChecks]
    runs-on: macos-latest
    # Only allow a single macOS build at a time, for Unity licensing reasons
    concurrency: mac
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Unity Hub
        run: |
          wget --quiet https://public-cdn.cloud.unity3d.com/hub/prod/UnityHubSetup.dmg
          mkdir UnityHubSetup
          hdiutil attach UnityHubSetup.dmg -mountpoint ./UnityHubSetup
          sudo cp -R "./UnityHubSetup/Unity Hub.app" /Applications
          hdiutil detach ./UnityHubSetup
          rm ./UnityHubSetup.dmg
      - name: Install Unity 2021.3.13f1
        # This command sometimes returns exit code 130, despite actually succeeding.
        continue-on-error: true
        run: |
          /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- --headless install --version 2021.3.13f1 --changeset 9e7d58001ecf
      - name: Configure Unity to Use the License Server
        run: |
          sudo mkdir -p "/Library/Application Support/Unity/config"
          sudo chmod g+w "/Library/Application Support/Unity"
          sudo chmod g+w "/Library/Application Support/Unity/config"
          sudo echo '{"licensingServiceBaseUrl": "http://localhost:12331","enableEntitlementLicensing": true,"clientConnectTimeoutSec": 60,"clientHandshakeTimeoutSec": 120}' > "/Library/Application Support/Unity/config/services-config.json"
      - name: Create SSH tunnel to Unity License Server
        env:
          UNITY_LICENSE_SERVER_SSH_KEY: ${{ secrets.UNITY_LICENSE_SERVER_SSH_KEY }}
        run: |
          echo "$UNITY_LICENSE_SERVER_SSH_KEY" > ~/unity-client-ssh-key
          chmod 600 ~/unity-client-ssh-key
          # Without StrictHostKeyChecking, OpenSSH will sit forever waiting for local input to confirm the server key is ok.
          # We don't really care if the server is authentic, because we're not sending anything sensitive to it.
          # The license server VM's sshd_config also needed to be modified with the following options, in order to prevent
          # the tunnel from being closed between here and when we're ready to use it.
          #   TCPKeepAlive yes
          #   ClientAliveInterval 30
          #   ClientAliveCountMax 9999
          ssh -fNT -o StrictHostKeyChecking=no -i ~/unity-client-ssh-key -L 127.0.0.1:12331:127.0.0.1:8080 unity-client@ec2-44-204-244-196.compute-1.amazonaws.com
          sleep 5
      - name: Test Connection to Unity License Server
        run: |
          wget http://127.0.0.1:12331/v1/admin/status
          cat status
          rm status
      - name: Move cesium-unity Repo Under Empty Project
        run: |
          mkdir -p ~/cesium/CesiumForUnityBuildProject/Packages/com.cesium.unity
          mv $GITHUB_WORKSPACE/* ~/cesium/CesiumForUnityBuildProject/Packages/com.cesium.unity
      - name: Build Reinterop
        run: |
          cd ~/cesium/CesiumForUnityBuildProject/Packages/com.cesium.unity
          dotnet publish Reinterop~ -o .
      - name: Build Package
        run: |
          cd ~/cesium/CesiumForUnityBuildProject/Packages/com.cesium.unity
          dotnet run --project Build~
          ls -l ~/cesium/CesiumForUnityBuildProject
      - name: Publish package artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: macOS Package
          path: ~/cesium/CesiumForUnityBuildProject/*.tgz
  Combine:
    runs-on: ubuntu-latest
    needs: [Windows, MacOS]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install jq
        run: sudo apt install jq
      - name: Download macOS build
        uses: actions/download-artifact@v3
        with:
          name: macOS Package
          path: combine
      - name: Extract macOS build
        run: |
          cd combine
          tar xzf *.tgz
          rm *.tgz
      - name: Download Windows build
        uses: actions/download-artifact@v3
        with:
          name: Windows Package
          path: combine
      - name: Extract Windows build
        run: |
          cd combine
          tar xzf *.tgz
          rm *.tgz
      - name: Create combined package
        run: |
          cd combine
          export NAME=$(jq -r ".name" package.json)
          export VERSION=$(jq -r ".version" package.json)
          tar czf $NAME-$VERSION.tgz package
      - name: Publish combined package
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: Combined Package
          path: combine/*.tgz
